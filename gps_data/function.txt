#define PRUNIT_GPS  299792.458  /* rtcm ver.3 unit of gps pseudorange (m) */
#define PRUNIT_GLO  599584.916  /* rtcm ver.3 unit of glonass pseudorange (m) */
#define RANGE_MS    (CLIGHT*0.001)      /* range in 1 ms */

#define P2_10       0.0009765625          /* 2^-10 */
#define P2_28       3.725290298461914E-09 /* 2^-28 */
#define P2_34       5.820766091346740E-11 /* 2^-34 */
#define P2_41       4.547473508864641E-13 /* 2^-41 */
#define P2_46       1.421085471520200E-14 /* 2^-46 */
#define P2_59       1.734723475976810E-18 /* 2^-59 */
#define P2_66       1.355252715606880E-20 /* 2^-66 */

/* type definition -----------------------------------------------------------*/

typedef struct {                    /* multi-signal-message header type */
    uint8_t iod;              /* issue of data station */
    uint8_t time_s;           /* cumulative session transmitting time */
    uint8_t clk_str;          /* clock steering indicator */
    uint8_t clk_ext;          /* external clock indicator */
    uint8_t smooth;           /* divergence free smoothing indicator */
    uint8_t tint_s;           /* soothing interval */
    uint8_t nsat,nsig;        /* number of satellites/signals */
    uint8_t sats[64];         /* satellites */
    uint8_t sigs[32];         /* signals */
    uint8_t cellmask[64];     /* cell mask */
} msm_h_t;

/* MSM signal ID table -------------------------------------------------------*/
const char *msm_sig_gps[32]={
    /* GPS: ref [17] table 3.5-91 */
    ""  ,"1C","1P","1W",""  ,""  ,""  ,"2C","2P","2W",""  ,""  , /*  1-12 */
    ""  ,""  ,"2S","2L","2X",""  ,""  ,""  ,""  ,"5I","5Q","5X", /* 13-24 */
    ""  ,""  ,""  ,""  ,""  ,"1S","1L","1X"                      /* 25-32 */
};
const char *msm_sig_glo[32]={
    /* GLONASS: ref [17] table 3.5-96 */
    ""  ,"1C","1P",""  ,""  ,""  ,""  ,"2C","2P",""  ,""  ,""  ,
    ""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,
    ""  ,""  ,""  ,""  ,""  ,""  ,""  ,""
};
const char *msm_sig_gal[32]={
    /* Galileo: ref [17] table 3.5-99 */
    ""  ,"1C","1A","1B","1X","1Z",""  ,"6C","6A","6B","6X","6Z",
    ""  ,"7I","7Q","7X",""  ,"8I","8Q","8X",""  ,"5I","5Q","5X",
    ""  ,""  ,""  ,""  ,""  ,""  ,""  ,""
};
const char *msm_sig_qzs[32]={
    /* QZSS: ref [17] table 3.5-105 */
    ""  ,"1C",""  ,""  ,""  ,""  ,""  ,""  ,"6S","6L","6X",""  ,
    ""  ,""  ,"2S","2L","2X",""  ,""  ,""  ,""  ,"5I","5Q","5X",
    ""  ,""  ,""  ,""  ,""  ,"1S","1L","1X"
};
const char *msm_sig_sbs[32]={
    /* SBAS: ref [17] table 3.5-102 */
    ""  ,"1C",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,
    ""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"5I","5Q","5X",
    ""  ,""  ,""  ,""  ,""  ,""  ,""  ,""
};
const char *msm_sig_cmp[32]={
    /* BeiDou: ref [17] table 3.5-108 */
    ""  ,"2I","2Q","2X","","",""  ,"6I","6Q","6X",""  ,""  ,
    ""  ,"7I","7Q","7X",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,
    ""  ,""  ,""  ,""  ,""  ,""  ,""  ,""
};
const char *msm_sig_irn[32]={
    /* NavIC/IRNSS: ref [17] table 3.5-108.3 */
    ""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,
    ""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"5A",""  ,""  ,
    ""  ,""  ,""  ,""  ,""  ,""  ,""  ,""
};

/* get observation data index ------------------------------------------------*/
static int obsindex(obs_t *obs, gtime_t time, int sat)
{
    int i,j;
    
    for (i=0;i<obs->n;i++) {
        if (obs->data[i].sat==sat) return i; /* field already exists */
    }
    if (i>=MAXOBS) return -1; /* overflow */
    
    /* add new field */
    obs->data[i].time=time;
    obs->data[i].sat=sat;
    for (j=0;j<NFREQ+NEXOBS;j++) {
        obs->data[i].L[j]=obs->data[i].P[j]=0.0;
        obs->data[i].D[j]=0.0;
        obs->data[i].SNR[j]=obs->data[i].LLI[j]=obs->data[i].code[j]=0;
    }
    obs->n++;
    return i;
}

static char *obscodes[]={       /* observation code strings */
    
    ""  ,"1C","1P","1W","1Y", "1M","1N","1S","1L","1E", /*  0- 9 */
    "1A","1B","1X","1Z","2C", "2D","2S","2L","2X","2P", /* 10-19 */
    "2W","2Y","2M","2N","5I", "5Q","5X","7I","7Q","7X", /* 20-29 */
    "6A","6B","6C","6X","6Z", "6S","6L","8L","8Q","8X", /* 30-39 */
    "2I","2Q","6I","6Q","3I", "3Q","3X","1I","1Q","5A", /* 40-49 */
    "5B","5C","9A","9B","9C", "9X","1D","5D","5P","5Z", /* 50-59 */
    "6E","7D","7P","7Z","8D", "8P","4A","4B","4X",""    /* 60-69 */
};

/* GNSSId to system  ---------------------------------------------------------*/
static int sky_sys(int gnssid)
{
    switch (gnssid) {
        case 0: return SYS_GPS;
        case 1: return SYS_SBS;
        case 2: return SYS_GLO;
        case 3: return SYS_GAL;
        case 4: return SYS_QZS;
        case 5: return SYS_CMP;
        case 6: return SYS_IRN;
    }
    return 0;
}
/* UBX SigId to signal (ref [5] 1.5.4) ---------------------------------------*/
static int sky_sig(int sys, int signal_type) {
    if (sys==SYS_GPS) {
        switch (signal_type) {
            case  1: return CODE_L1X;
            case  2: return CODE_L2X;
            case  4: return CODE_L5X;
            default: return CODE_L1C;
        }
    }
    else if (sys==SYS_SBS) {
        return CODE_L1C;
    }
    else if (sys==SYS_GLO) {
        switch (signal_type) {
            case  2: return CODE_L2C;
            case  4: return CODE_L3X;
            default: return CODE_L1C;
        }
    }
    else if (sys==SYS_GAL) {
        switch (signal_type) {
            case  4: return CODE_L5X;
            case  5: return CODE_L7X;
            case  6: return CODE_L6X;
            default: return CODE_L1C;
        }
    }
    else if (sys==SYS_QZS) {
        switch (signal_type) {
            case  1: return CODE_L1X;
            case  2: return CODE_L2X;
            case  4: return CODE_L5X;
            case  6: return CODE_L6X;
            default: return CODE_L1C;
        }
    }
    else if (sys==SYS_CMP) { /* BeiDou */
        switch (signal_type) {
            case  1: return CODE_L1X;
            case  4: return CODE_L5X;
            case  5: return CODE_L7I;
            case  7: return CODE_L6I;
            default: return CODE_L2I;
        }
    }
    else {
        //trace(2,"stq rawx gnss type error: type=%d\n",sys);
        return(CODE_NONE);
    }
}
/* GPS obs code to frequency -------------------------------------------------*/
static int code2freq_GPS(uint8_t code, double *freq)
{
    const char *obs = code2obs(code);
    //printf(" code2freq_GPS: 0x%02X  ", obs[0]);
    switch (obs[0]) {
        case '1': *freq=FREQL1;  return 0; /* L1 */
        case '2': *freq=FREQL2;  return 1; /* L2 */
        case '5': *freq=FREQL5;  return 2; /* L5 */
    }
    return -1;
}
/* GLONASS obs code to frequency ---------------------------------------------*/
static int code2freq_GLO(uint8_t code, int fcn, double *freq)
{
    const char *obs = code2obs(code);

    if (fcn<-7||fcn>6) return -1;

    switch (obs[0]) {
        case '1': *freq=FREQ1_GLO+DFRQ1_GLO*fcn; return 0; /* G1 */
        case '2': *freq=FREQ2_GLO+DFRQ2_GLO*fcn; return 1; /* G2 */
        case '3': *freq=FREQ3_GLO;               return 2; /* G3 */
        case '4': *freq=FREQ1a_GLO;              return 0; /* G1a */
        case '6': *freq=FREQ2a_GLO;              return 1; /* G2a */
    }
    return -1;
}
/* Galileo obs code to frequency ---------------------------------------------*/
static int code2freq_GAL(uint8_t code, double *freq)
{
    const char *obs = code2obs(code);


    switch (obs[0]) {
        case '1': *freq=FREQL1; return 0; /* E1 */
        case '7': *freq=FREQE5b;  return 1; /* E5b */
        case '5': *freq=FREQL5; return 2; /* E5a */
        case '6': *freq=FREQL6; return 3; /* E6 */
        case '8': *freq=FREQE5ab; return 4; /* E5ab */
    }
    return -1;
}
/* QZSS obs code to frequency ------------------------------------------------*/
static int code2freq_QZS(uint8_t code, double *freq)
{
    const char *obs = code2obs(code);


    switch (obs[0]) {
        case '1': *freq=FREQL1;  return 0; /* L1 */
        case '2': *freq=FREQL2;  return 1; /* L2 */
        case '5': *freq=FREQL5;  return 2; /* L5 */
        case '6': *freq=FREQL6;  return 3; /* L6 */
    }
    return -1;
}
/* SBAS obs code to frequency ------------------------------------------------*/
static int code2freq_SBS(uint8_t code, double *freq)
{
    const char *obs = code2obs(code);


    switch (obs[0]) {
        case '1': *freq=FREQL1; return 0; /* L1 */
        case '5': *freq=FREQL5; return 1; /* L5 */
    }
    return -1;
}
/* BDS obs code to frequency -------------------------------------------------*/
static int code2freq_BDS(uint8_t code, double *freq)
{
    const char *obs = code2obs(code);
    

    switch (obs[0]) {
        case '1': *freq=FREQL1;    return 0; /* B1C */
        case '2': *freq=FREQ1_CMP;  return 0; /* B1I */
        case '7': *freq=FREQ2_CMP;  return 1; /* B2b */
        case '5': *freq=FREQL5;     return 2; /* B2a */
        case '6': *freq=FREQ3_CMP; return 3; /* B3 */
        case '8': *freq=FREQE5ab;   return 4; /* B2ab */
    }
    return -1;
}
/* NavIC obs code to frequency -----------------------------------------------*/
static int code2freq_IRN(uint8_t code, double *freq)
{
    const char *obs = code2obs(code);


    switch (obs[0]) {
        case '5': *freq=FREQL5; return 0; /* L5 */
        case '9': *freq=FREQs; return 1; /* S */
    }
    return -1;
}
/*-----------------------------------------------------------------------------*/
int code2idx(int sys, uint8_t code)
{
    double freq;
  
    switch (sys) {
        case SYS_GPS:  return code2freq_GPS(code,&freq);
        case SYS_GLO:  return code2freq_GLO(code,0,&freq);
        case SYS_GAL:  return code2freq_GAL(code,&freq);
        case SYS_QZS:  return code2freq_QZS(code,&freq);
        case SYS_SBS:  return code2freq_SBS(code,&freq);
        case SYS_CMP:  return code2freq_BDS(code,&freq);
        case SYS_IRN:  return code2freq_IRN(code,&freq);
    }
    return -1;
}

double code2freq(int sys, uint8_t code, int fcn)
{
    double freq = 0.0;

    switch (sys) {
    case SYS_GPS:
        (void) code2freq_GPS(code, &freq);
        break;
    case SYS_GLO:
        (void) code2freq_GLO(code, fcn, &freq);
        break;
    case SYS_GAL:
        (void) code2freq_GAL(code, &freq);
        break;
    case SYS_QZS:
        (void) code2freq_QZS(code, &freq);
        break;
    case SYS_SBS:
        (void) code2freq_SBS(code, &freq);
        break;
    case SYS_CMP:
        (void) code2freq_BDS(code, &freq);
        break;
    case SYS_IRN:
        (void) code2freq_IRN(code, &freq);
        break;
    }
    return freq;
}